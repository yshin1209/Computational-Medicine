// Computational Medicine
// Two-Gene Network Simulation using Unity and Function Nanoservice
// Yong-Jun Shin (2019)using System.Collections;

using Newtonsoft.Json;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

public class CellScript : MonoBehaviour
{
    float x;        // x protein concentration in uM (scalar)
    float y;        // y protein concentration in uM (scalar)
    float Pxy;      // production parameter
    float Py;       // degradation parameter
    float r;        // red color intensity representing y protein concentration (0 - 1)
    float yMax;     // maximal y protein concentration in uM
    string url = "https://yongjunshin3.azurewebsites.net/api/SimpleTwoGeneRegulatoryNetworkService"; // service URL

    // Start is called before the first frame update
    void Start()
    {
        Pxy = 0.8f;
        Py = 0.95f;
        x = 10.0f;    // constanx x protein concentration (= 10 uM)
        y = 0.0f;     // initial y protein concentration (= 0 uM)
        yMax = 2 * Pxy * x / (1 - Py);  // assume yMax equals 2 times steady state level
    }

    // FixedUpdate is called once per frame.
    // 0.02 seconds (50 calls per second) is the default time between calls.
    async Task FixedUpdate()
    {
        Time.fixedDeltaTime = 0.05f;  // the time interval in seconds at which physics and other fixed
                                      // fixed frame updates are performed.

        // y = Pxy * x + Py * y;  // difference equation

        // data to be sent to the server
        RequestData requestData = new RequestData();
        requestData.x = x;
        requestData.y = y;
        requestData.Pxy = Pxy;
        requestData.Py = Py;

        using (HttpClient client = new HttpClient())
        {
            y = await PostAsync(client, requestData, url); // make a web service request
        }

        r = y / yMax;          // compute r
        GetComponent<Renderer>().material.color = new Color(r, 0, 0); // update the red color intensity
        Debug.Log("y: " + y);  // display y value in the Unity console window
        Debug.Log("r: " + r);  // display r value in the Unity console window
    }

    static async Task<float> PostAsync(HttpClient client, RequestData data, string url)
    {
        var request = new HttpRequestMessage(HttpMethod.Post, url);
        string jsonRequestBody = JsonConvert.SerializeObject(data);
        request.Content = new StringContent(jsonRequestBody, Encoding.UTF8, "application/json");
        var response = await client.SendAsync(request);
        var content = await response.Content.ReadAsStringAsync();
        ResponseData responseData = JsonConvert.DeserializeObject<ResponseData>(content);
        return responseData.y;
    }
}

public class RequestData
{
    public float x;
    public float y;
    public float Pxy;
    public float Py;
}

// server returns x and y
public class ResponseData
{
    public float x;
    public float y;
}


Server-side Azure Function code

// Computational Medicine
// Simple 2-Gene Regulatory Network Simulation using Function Nanoservice
// Yong-Jun Shin (2019)

#r "Newtonsoft.Json"

using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json;

public static async Task<Response> Run(HttpRequest req, ILogger log)
{
    string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
    dynamic data = JsonConvert.DeserializeObject(requestBody);

    double x = data.x;       // x protein (scalar)
    double y = data.y;       // y protein (scalar)
    double Pxy = data.Pxy;   // production parameter
    double Py = data.Py;     // degradation parameter

    y = Pxy*x + Py*y;        // difference equation
    log.LogInformation($"The new y protein concentration is {y}");
    //return y;                // return new y value to the client

    // return x and y (return multiple data)
    Response r = new Response();
    r.x = x;
    r.y = y;
    return r;
}

// create a new class to bundle response data
public class Response
{
    public double x;  // x protein (scalar)
    public double y;  // y protein (scalar)
}
