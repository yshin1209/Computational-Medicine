
# Computational Medicine
# Two-Gene Network Simulation using Function Nanoservice
# Client-side code
# Yong-Jun Shin (2019)


import numpy as np
import matplotlib.pyplot as plt
import requests

N = 100                  # total number of data points
n = np.arange(0, N, 1)   # [0,..., N-1] (vector)
x = np.empty(N)          # protein x concentration in uM (vector)
y = np.empty(N)          # protein y concentration in uM (vector)
x.fill(10)               # constant x protein concentration (= 10 uM)
y[0] = 0                 # initial y protein concentration (= 0 uM)
Pxy = 0.2                # production parameter
Py = 0.9                 # degradation parameter

url = ''                 # Azure Functions URL

for i in range (1, N):                                     # discrete-time index i
    data = {'x':x[i-1], 'y':y[i-1], 'Pxy':Pxy, 'Py':Py}    # data to be sent to the server
    response = requests.post(url, json = data)             # send data and receive response
    responseJson = response.json()
    y[i] = responseJson['y']           
    print (y[i])
    
    # response with multiple data (y and z)
    # responseJson = response.json()
    # print (responseJson)
    # y[i] = responseJson['y']
    # z[i] = responseJson['z']

plt.plot(n,x,'g',label = 'x')
plt.plot(n,y,'r',label = 'y')
plt.xlabel('time (n)')
plt.ylabel('protein concentration (uM)')
plt.legend(loc='lower right')
plt.title('x --> y')
plt.grid(True)
plt.show()


---------------------------------------------------------------------------------

// Computational Medicine
// Simple 2-Gene Regulatory Network Simulation using Function Nanoservice
// Server-side code
// Yong-Jun Shin (2019)


#r "Newtonsoft.Json"

using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json;

public static async Task<double> Run(HttpRequest req, ILogger log)
{
    string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
    dynamic data = JsonConvert.DeserializeObject(requestBody);

    double x = data.x;       // x protein concentration in uM (scalar)
    double y = data.y;       // y protein concentration in uM (scalar)
    double Pxy = data.Pxy;   // production parameter
    double Py = data.Py;     // degradation parameter

    y = Pxy*x + Py*y;        // difference equation
    log.LogInformation($"The new y protein concentration is {y}");
    return y;                // return new y value to the client

    // return multiple data(y and z)
    /*
    Response r = new Response();
    r.y = y;
    r.z = z;
    return r;
    */
}

// create a new class to bundle response data
/*
public class Response
{
    public double y;  // y protein concentration (scalar)
    public double z;  // z protein concentration (scalar)
}
*/
